Give me a C++ template with:
- Problem statement as a comment at the top
- No approach or solution explained
- A clean function with only the signature and empty logic
- A sample main() function to call and print the result
- Always use #include <bits/stdc++.h>

Problem:
[Paste your problem here]
============================================================================== C++ Program Structure for Algorithmic Problem Solving ==============================================================================

Objective:
    Provide a complete C++ program to solve a specified algorithmic problem, 
    demonstrating multiple solution approaches with detailed explanations, 
    complexity analysis, and thorough testing.

Instructions:
    1. Write the observations of the question before starting with algorithm
    2. Select a well-defined algorithmic problem (e.g., sorting, searching, dynamic 
       programming, graph traversal).
    3. Follow the structure below to ensure clarity, readability, and comprehensive 
       coverage.
    4. Use proper indentation (4 spaces per level) and consistent formatting.
    5. Include inline comments to explain key logic and improve code maintainability.
    6. Ensure the code handles edge cases (e.g., empty inputs, negative numbers) and 
       provides clear input/output formats.
    7. Write modular, reusable code with descriptive variable names and minimal 
       redundancy.

==============================================================================
Section 1: Problem Statement
==============================================================================
    - Provide a concise description of the problem as a comment.
    - Include example inputs and outputs to illustrate the problem.
    - Specify constraints (e.g., input size, value ranges) and edge cases.

==============================================================================
Section 2: Solution Approaches
==============================================================================
    - Describe  approaches: Brute Force, Better, and Optimal whatever i have mentioned.
    - For each approach:
        a. Explain the logic in detail, including the thought process.
        b. Outline the steps or algorithm in pseudocode or prose.
        c. Analyze time and space complexity with justification.
        d. Discuss limitations or trade-offs.
    - For the Optimal Approach:
        - Emphasize why it is the most efficient (e.g., reduced iterations, better data 
          structures).

==============================================================================
Section 3: Code Implementation
==============================================================================
    - Provide complete, clean, and readable C++ code for each approach.
    - Use separate functions for each approach to ensure modularity.
    - Include inline comments to explain critical logic.
    - Follow C++ best practices (e.g., const correctness, avoid global variables).
    - Handle edge cases and validate inputs where applicable.


WRITE EVERYTHING IN CODE FORMAT (.cpp)
==============================================================================
Code Structure
==============================================================================